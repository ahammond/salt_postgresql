<Plugin postgresql>
  <Query "pg_stat_activity">
    MinVersion 90200
    Statement "WITH a AS ( \
      SELECT datname \
      , count(*) AS count \
      , SUM(CASE WHEN state = 'active' THEN 1 ELSE 0 END) AS state_active \
      , SUM(CASE WHEN state = 'idle' THEN 1 ELSE 0 END) AS state_idle \
      , SUM(CASE WHEN state = 'idle in transaction' THEN 1 ELSE 0 END) AS state_idle_in_transaction \
      , SUM(CASE WHEN state = 'idle in transaction aborted' THEN 1 ELSE 0 END) AS state_idle_in_transaction_aborted \
      , SUM(CASE WHEN state = 'fastpath function call' THEN 1 ELSE 0 END) AS state_fastpath_function_call \
      , SUM(CASE WHEN state = 'disabled' THEN 1 ELSE 0 END) AS state_disabled \
      , SUM(CASE WHEN waiting THEN 1 ELSE 0 END) AS waiting \
      FROM pg_stat_activity \
      WHERE datname = $1 \
      GROUP BY datname ) \
      SELECT datname \
      , unnest(array['count', 'state_active', 'state_idle', 'state_idle_in_transaction', 'state_idle_in_transaction_aborted', 'state_fastpath_function_call', 'state_disabled']) AS key \
      , unnest(array[count, state_active, state_idle, state_idle_in_transaction, state_idle_in_transaction_aborted, state_fastpath_function_call, state_disabled]) AS val \
     FROM a"
    Param database
    <Result>
      Type gauge
      InstancePrefix "pg_stat_activity"
      InstancesFrom "key"
      ValuesFrom "val"
    </Result>
  </Query>
  <Query "pg_stat_bgwriter">
    MinVersion 90200
{% set bg_columns92 = ('checkpoints_timed', 'checkpoints_req', 'checkpoint_write_time',
                  'checkpoint_sync_time', 'buffers_checkpoint', 'buffers_clean',
                  'maxwritten_clean', 'buffers_backend', 'buffers_backend_fsync',
                  'buffers_alloc') -%}
{% set comma92a = joiner() -%}
{% set comma92b = joiner() -%}
{% set comma92c = joiner() -%}
    Statement "WITH a AS ( \
      SELECT{% for v in bg_columns92 %}{{ comma92a() }} {{ v }}{% endfor %} \
      FROM pg_stat_bgwriter )  \
      SELECT unnest(array[{% for v in bg_columns92 %}{{ comma92b() }} '{{ v }}'{% endfor %}]) AS key \
           , unnest(array[{% for v in bg_columns92 %}{{ comma92c() }} {{ v }}{% endfor %}]) AS val \
      FROM a"
    <Result>
      Type counter
      InstancePrefix "pg_stat_bgwriter"
      InstancesFrom "key"
      ValuesFrom "val"
    </Result>
  </Query>
  <Query "replication_lag">
    Statement "SELECT EXTRACT('epoch' FROM now() - pg_last_xact_replay_timestamp()) AS replication_lag"
    <Result>
     Type gauge
     InstancePrefix "replication_lag"
     ValuesFrom "replication_lag"
    </Result>
  </Query>
  <Query "show_stats">
    Statement "SHOW STATS"
    <Result>
    </Result>
  </Query>
{# #########################
## Database declarations  ##
######################### #}
{%- for database in databases|sort %}
{%-   if 'pgbouncer' == database %}
  <Database "pgbouncer">
    User "collectd"
    Query "show_stats"
  </Database>
{%-   else %}
  <Database "{{ database }}">
    User "collectd"
    Query "replication_lag"
    Query "pg_stat_activity"
    Query "pg_stat_bgwriter"
    Query transactions
    Query queries
    Query query_plans
    Query table_states
    Query disk_io
  </Database>
{%-   endif %}
{%- endfor %}
</Plugin>
